name: Deploy Hugo site to Pages

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # 每天 UTC 时间 2 点
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      # 1. 检出仓库代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # 2. 安装 Hugo
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      # 3. 配置 GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # 4. 准备 content（复制附件 & 处理 Markdown）
      - name: Prepare content
        run: |
          # 下载 PaperMod 主题
          mkdir -p themes
          git clone https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod

          # 创建 content 目录，Hugo 默认从 content/ 读取内容
          mkdir -p content

          # 判断是否跳过某些文件/目录的函数
          should_skip() {
            local p="$1"

            # 跳过 .git / .github / 顶层 README.md / 以及 workflow 配置文件本身
            if [[ "$p" == ./.git* || "$p" == ./.github* ]]; then
              return 0  # 0 表示 true，这里选择跳过
            fi
            # 如果你有更多需要跳过的文件或目录，可在此添加规则

            # 跳过顶层 README.md（可按需调整）
            if [[ "$p" == ./README.md ]]; then
              return 0
            fi

            return 1  # 1 表示 false，不跳过
          }

          # 自动生成或保留 Front Matter
          generate_front_matter() {
            local src_md="$1"

            # 以去掉开头的 "./" 作为相对路径（比如 docs/xx.md）
            local rel_path="${src_md#./}"

            local title=$(basename "$rel_path" .md)
            local date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

            # 取该 md 文件的上一级目录名作为分类（可随需求改进）
            local category="$(dirname "$rel_path" | cut -d/ -f1)"

            # 目标路径：content/ + 相对路径
            local dest_md="content/$rel_path"
            mkdir -p "$(dirname "$dest_md")"

            # 如果已有 front matter，就直接复制
            if grep -q "^---" "$file"; then
              cp "$file" "content/$category/$title.md"
              return
            fi

            # 若没有 front matter，自动生成
            {
              echo "---"
              echo "title: \"$title\""
              echo "date: $date"
              # 想按目录来区分分类，可保留这一行
              echo "categories: [\"$category\"]"
              # ★★ 修复点：统一指定所有文章的 type = "post" ★★
              echo "type: \"post\""
              echo "---"
              cat "$file"
            } > "content/$category/$title.md"
          }

          # 遍历所有 md 文件（排除 README.md）
          find . -type f -name "*.md" ! -name "README.md" | while read file; do
            dir=$(dirname "$file" | sed 's|^./||')
            mkdir -p "content/$dir"
            generate_front_matter "$file"
          done

      # 5. 写入 Hugo 配置（config.toml）
      - name: Configure Hugo
        run: |
          cat > config.toml << EOL
          baseURL = "https://doc.protomyst.com"
          languageCode = "zh-cn"
          title = "${{ github.repository_owner }}'s Space"
          theme = "PaperMod"

          [params]
            # 所有文章都被设置为 type="post"，因此 mainSections = ["post"]
            mainSections = ["post"]

            defaultTheme = "auto"
            ShowReadingTime = true
            ShowShareButtons = false
            ShowPostNavLinks = true
            ShowBreadCrumbs = true
            ShowCodeCopyButtons = true
            ShowToc = true

            [params.homeInfoParams]
              Title = "欢迎来到 ${{ github.repository_owner }} 的文档站"
              Content = "在喧嚣时代中静心思考，用文字传递理性与希望。"

            [[params.socialIcons]]
              name = "github"
              url = "https://github.com/${{ github.repository_owner }}"

          [outputs]
            home = ["HTML", "RSS", "JSON"]

          [taxonomies]
            category = "categories"
            tag = "tags"

          [menu]
            main = [
              {identifier = "archives", name = "Archives", url = "/archives/", weight = 10},
              {identifier = "categories", name = "Categories", url = "/categories/", weight = 20},
              {identifier = "search", name = "Search", url = "/search/", weight = 30},
              {identifier = "tags", name = "Tags", url = "/tags/", weight = 40}
            ]
          EOL

          # 额外创建搜索页面 & 归档页面
          mkdir -p content
          cat > content/search.md << EOL
          ---
          title: "Search"
          layout: "search"
          summary: "search"
          placeholder: "搜索文章..."
          ---
          EOL

          cat > content/archives.md << EOL
          ---
          title: "Archives"
          layout: "archives"
          url: "/archives/"
          summary: "archives"
          ---
          EOL

      # 6. Hugo 构建
      - name: Build site
        run: hugo --minify

      # 7. 上传构建产物
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      # 8. 部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4