name: Deploy Hugo site to Pages

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      # 1. 检出代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # 2. 设置 Hugo 环境
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      # 3. 配置 GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # 4. 下载 PaperMod 主题 + 处理文档
      - name: Download PaperMod theme
        run: |
          mkdir -p themes
          git clone https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
          
          generate_front_matter() {
            local file="$1"
            local title=$(basename "$file" .md)
            local date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            local category=$(dirname "$file" | sed 's|^./||')
            
            # 如果已有 front matter，就直接复制过去
            if grep -q "^---" "$file"; then
              cp "$file" "content/$category/$title.md"
              return
            fi
            
            # 否则自动生成 front matter
            {
              echo "---"
              echo "title: \"$title\""
              echo "date: $date"
              echo "categories: [\"$category\"]"
              #如果想统一用同一个类型，取消下面行的注释：
              echo "type: \"post\""
              echo "---"
              cat "$file"
            } > "content/$category/$title.md"
          }
          
          # 拷贝所有 md 文件（除了 README.md）
          find . -type f -name "*.md" ! -name "README.md" | while read file; do
            dir=$(dirname "$file" | sed 's|^./||')
            mkdir -p "content/$dir"
            generate_front_matter "$file"
          done

      # 5. Hugo 配置文件（在这里进行修复：明确指定 mainSections）
      - name: Configure Hugo
        run: |
          cat > config.toml << EOL
          baseURL = "https://doc.protomyst.com"
          languageCode = "zh-cn"
          title = "${{ github.repository_owner }}'s Space"
          theme = "PaperMod"

          # 修改点：让主题把所有子文件夹都视为主要 section
          [params]
            # 比如你的文件夹分别叫 Articles、技术文档、笔记
            mainSections = ["Doc1", "新年献词"]
            
            defaultTheme = "auto"
            ShowReadingTime = true
            ShowShareButtons = false
            ShowPostNavLinks = true
            ShowBreadCrumbs = true
            ShowCodeCopyButtons = true
            ShowToc = true

            [params.homeInfoParams]
              Title = "欢迎来到 ${{ github.repository_owner }} 的文档站"
              Content = "在喧嚣时代中静心思考，用文字传递理性与希望。"

            [[params.socialIcons]]
              name = "github"
              url = "https://github.com/${{ github.repository_owner }}"

          # Hugo 的输出
          [outputs]
            home = ["HTML", "RSS", "JSON"]

          # 若你需要自定义分类、标签等，也可在这里设置
          [taxonomies]
            category = "categories"
            tag = "tags"

          [menu]
            main = [
              {identifier = "archives", name = "Archives", url = "/archives/", weight = 10},
              {identifier = "categories", name = "Categories", url = "/categories/", weight = 20},
              {identifier = "search", name = "Search", url = "/search/", weight = 30},
              {identifier = "tags", name = "Tags", url = "/tags/", weight = 40}
            ]
          EOL
          
          # 创建必须的内容目录
          mkdir -p content

          # 搜索页面
          cat > content/search.md << EOL
          ---
          title: "Search"
          layout: "search"
          summary: "search"
          placeholder: "搜索文章..."
          ---
          EOL

          # 归档页面
          cat > content/archives.md << EOL
          ---
          title: "Archives"
          layout: "archives"
          url: "/archives/"
          summary: "archives"
          ---
          EOL

      # 6. Hugo 构建站点
      - name: Build site
        run: hugo --minify

      # 7. 上传构建产物
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      # 8. 部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4