name: Hugo Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  add-front-matter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Process Documents
        id: process
        run: |
          # 创建日志目录
          mkdir -p .logs
          
          # 初始化计数器
          TOTAL=0
          PROCESSED=0
          FAILED=0
          
          log() {
            echo "[$1] $2" | tee -a .logs/process.log
          }
          
          process_file() {
            local file="$1"
            local title=$(basename "$file" .md)
            local utc_date
            local date
            local category
            
            # 获取最后提交时间
            utc_date=$(git log -1 --format="%aI" -- "$file" 2>/dev/null || date -u +"%Y-%m-%dT%H:%M:%SZ")
            date=$(TZ='Asia/Shanghai' date -d "$utc_date" +"%Y-%m-%dT%H:%M:%S+08:00")
            category=$(dirname "$file" | sed 's|^./||')
            
            # 检查是否已有 front matter
            if sed -n '1{/^---$/h}; /^---$/{x;p;q}; H' "$file" | grep -q "^---$"; then
              log "INFO" "跳过 $file: 已存在 front matter"
              return 0
            fi
            
            log "INFO" "处理文件: $file"
            
            # 检查文件权限
            if [ ! -w "$file" ]; then
              log "ERROR" "无法写入文件: $file"
              return 1
            fi
            
            # 创建临时文件
            local temp_file
            temp_file=$(mktemp)
            
            # 生成新内容
            {
              echo "---"
              echo "title: \"$title\""
              echo "date: $date"
              echo "categories: [\"$category\"]"
              echo "type: \"post\""
              echo "---"
              cat "$file"
            } > "$temp_file"
            
            # 更新文件
            if mv "$temp_file" "$file"; then
              log "SUCCESS" "已添加 front matter 到 $file"
              return 0
            else
              rm -f "$temp_file"
              log "ERROR" "更新文件失败: $file"
              return 1
            fi
          }
          
          # 处理所有 markdown 文件
          while IFS= read -r file; do
            TOTAL=$((TOTAL + 1))
            if process_file "$file"; then
              PROCESSED=$((PROCESSED + 1))
            else
              FAILED=$((FAILED + 1))
            fi
          done < <(find . -type f -name "*.md" ! -name "README.md")
          
          # 输出统计信息
          {
            echo "总文件数: $TOTAL"
            echo "成功处理: $PROCESSED"
            echo "处理失败: $FAILED"
          } | tee -a .logs/process.log
          
          # 设置 GitHub Actions 输出
          echo "processed=$PROCESSED" >> "$GITHUB_OUTPUT"
          echo "failed=$FAILED" >> "$GITHUB_OUTPUT"

      - name: Commit Front Matter changes
        if: steps.process.outputs.processed > 0
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add -A
          git commit -m "chore: add front matter to documents
          
          处理文件数: ${{ steps.process.outputs.processed }}
          失败数: ${{ steps.process.outputs.failed }}
          
          详细日志请查看 Actions 运行记录"
          git push

  configure-settings:
    needs: add-front-matter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Retrieve custom domain
        id: fetch-domain
        run: |2
          customDomain=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/pages \
            | jq -r '.cname // ""')
          echo "CUSTOM_DOMAIN=$customDomain" >> $GITHUB_ENV

      - name: Create Hugo config
        id: configure
        env:
          HUGO_CONFIG: |
            baseURL = "https://__DOMAIN__"
            languageCode = "zh-cn"
            title = "__OWNER__'s Space"
            theme = "PaperMod"

            [params]
            mainSections = ["post"]
            defaultTheme = "auto"
            ShowReadingTime = true
            ShowShareButtons = false
            ShowPostNavLinks = true
            ShowBreadCrumbs = true
            ShowCodeCopyButtons = true
            ShowToc = true

            [params.homeInfoParams]
            Title = "欢迎来到 __OWNER__ 的文档站"
            Content = "在喧嚣时代中静心思考，用文字传递理性与希望。"

            [[params.socialIcons]]
            name = "github"
            url = "https://github.com/__OWNER__"

            [outputs]
            home = ["HTML", "RSS", "JSON"]

            [taxonomies]
            category = "categories"
            tag = "tags"

            [menu]
            main = [
            {identifier = "archives", name = "Archives", url = "/archives/", weight = 10},
            {identifier = "categories", name = "Categories", url = "/categories/", weight = 20},
            {identifier = "search", name = "Search", url = "/search/", weight = 30},
            {identifier = "tags", name = "Tags", url = "/tags/", weight = 40}
            ]
        run: |2
          # 设置域名
          if [ -n "$CUSTOM_DOMAIN" ]; then
            domain="$CUSTOM_DOMAIN"
          else
            owner="${GITHUB_REPOSITORY_OWNER}"
            repo="$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)"
            domain="$owner.github.io/$repo"
          fi

          # 检查并创建配置文件
          if [ ! -f ".github/hugo.toml" ]; then
            echo "创建 hugo.toml 配置文件"
            mkdir -p .github
            echo "$HUGO_CONFIG" > .github/hugo.toml
            
            # 替换变量
            sed -i "s|__DOMAIN__|$domain|g" .github/hugo.toml
            sed -i "s|__OWNER__|${GITHUB_REPOSITORY_OWNER}|g" .github/hugo.toml
            
            echo "已创建 hugo.toml 配置文件"
          else
            echo "hugo.toml 配置文件已存在，跳过创建"
          fi

      - name: Commit Hugo settings
        if: success()
        run: |2
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add -A
          if ! git diff --quiet --staged; then
            git commit -m "chore: configure hugo settings"
            git push || (git pull --rebase && git push)
          fi

  deploy-pages:
    needs: configure-settings
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      # 获取最新的代码，包括之前job创建的文件
      - name: Checkout latest code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          ref: main
          clean: false

      # 确保我们有最新的更改
      - name: Pull latest changes
        run: |
          git fetch origin main
          git checkout main
          git pull origin main

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Install PaperMod theme
        run: |2
          if [ ! -d "themes/PaperMod" ]; then
            git submodule add -b master https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
          fi

      - name: Create required pages
        run: |2
          mkdir -p content
          cat > content/search.md << 'EOL'
          ---
          title: "Search"
          layout: "search"
          summary: "search"
          placeholder: "搜索文章..."
          ---
          EOL

          cat > content/archives.md << 'EOL'
          ---
          title: "Archives"
          layout: "archives"
          url: "/archives/"
          summary: "archives"
          ---
          EOL

      - name: Copy and process content
        run: |2
          find . -type f \
            ! -path "*/\.*" \
            ! -path "*/themes/*" \
            ! -path "*/content/*" \
            ! -path "*/public/*" \
            ! -name "README.md" \
            ! -name "hugo.toml" \
            -exec cp --parents {} content/ \;

          find content -type f -name "*.md" -exec sed -i 's|\./\(images\|img\|assets\)/|../\1/|g' {} +
          find content -type f -name "*.md" -exec sed -i 's|\./|../|g' {} +

      - name: Use configured hugo.toml
        run: |2
          if [ -f ".github/hugo.toml" ]; then
            cp .github/hugo.toml ./hugo.toml
          else
            echo "错误：找不到 hugo.toml 配置文件"
            exit 1
          fi

      - name: Build site
        run: hugo --gc --minify

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
