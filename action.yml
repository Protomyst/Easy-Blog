name: 'Hugo PaperMod Deploy'
description: 'Hugo 博客一键部署，专注于写作，而不是工具配置。'
author: 'Protomyst'
branding:
  icon: 'upload-cloud'
  color: 'blue'

inputs:
  github_token:
    description: 'GitHub Token，用于访问 API 和推送更改'
    required: true
  hugo_version:
    description: 'Hugo 版本号'
    required: false
    default: 'latest'
  custom_domain:
    description: '自定义域名'
    required: false
  base_url:
    description: '网站基础 URL'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Process Documents
      id: process
      shell: bash
      run: |
        # 创建日志目录
        mkdir -p .logs
        
        # 初始化计数器
        TOTAL=0
        PROCESSED=0
        FAILED=0
        
        log() {
          echo "[$1] $2" | tee -a .logs/process.log
        }
        
        process_file() {
          local file="$1"
          local title=$(basename "$file" .md)
          local utc_date
          local date
          local category
          
          # 获取最后提交时间
          utc_date=$(git log -1 --format="%aI" -- "$file" 2>/dev/null || date -u +"%Y-%m-%dT%H:%M:%SZ")
          date=$(TZ='Asia/Shanghai' date -d "$utc_date" +"%Y-%m-%dT%H:%M:%S+08:00")
          category=$(dirname "$file" | sed 's|^./||')
          
          # 检查是否已有 front matter
          if sed -n '1{/^---$/h}; /^---$/{x;p;q}; H' "$file" | grep -q "^---$"; then
            log "INFO" "跳过 $file: 已存在 front matter"
            return 0
          fi
          
          log "INFO" "处理文件: $file"
          
          # 检查文件权限
          if [ ! -w "$file" ]; then
            log "ERROR" "无法写入文件: $file"
            return 1
          fi
          
          # 创建临时文件
          local temp_file
          temp_file=$(mktemp)
          
          # 生成新内容
          {
            echo "---"
            echo "title: \"$title\""
            echo "date: $date"
            echo "categories: [\"$category\"]"
            echo "type: \"post\""
            echo "---"
            cat "$file"
          } > "$temp_file"
          
          # 更新文件
          if mv "$temp_file" "$file"; then
            log "SUCCESS" "已添加 front matter 到 $file"
            return 0
          else
            rm -f "$temp_file"
            log "ERROR" "更新文件失败: $file"
            return 1
          fi
        }
        
        # 处理所有 markdown 文件
        while IFS= read -r file; do
          TOTAL=$((TOTAL + 1))
          if process_file "$file"; then
            PROCESSED=$((PROCESSED + 1))
          else
            FAILED=$((FAILED + 1))
          fi
        done < <(find . -type f -name "*.md" ! -name "README.md")
        
        # 输出统计信息
        {
          echo "总文件数: $TOTAL"
          echo "成功处理: $PROCESSED"
          echo "处理失败: $FAILED"
        } | tee -a .logs/process.log
        
        # 设置输出
        echo "processed=$PROCESSED" >> "$GITHUB_OUTPUT"
        echo "failed=$FAILED" >> "$GITHUB_OUTPUT"

    - name: Configure Hugo Settings
      id: configure
      shell: bash
      run: |
        HUGO_CONFIG="baseURL = \"${{ inputs.base_url || 'https://' + github.repository_owner + '.github.io/' + github.event.repository.name }}\"
        languageCode = \"zh-cn\"
        title = \"${{ github.repository_owner }}'s Space\"
        theme = \"PaperMod\"

        [params]
        mainSections = [\"post\"]
        defaultTheme = \"auto\"
        ShowReadingTime = true
        ShowShareButtons = false
        ShowPostNavLinks = true
        ShowBreadCrumbs = true
        ShowCodeCopyButtons = true
        ShowToc = true

        [params.homeInfoParams]
        Title = \"欢迎来到 ${{ github.repository_owner }} 的文档站\"
        Content = \"在喧嚣时代中静心思考，用文字传递理性与希望。\"

        [[params.socialIcons]]
        name = \"github\"
        url = \"https://github.com/${{ github.repository_owner }}\"

        [outputs]
        home = [\"HTML\", \"RSS\", \"JSON\"]

        [taxonomies]
        category = \"categories\"
        tag = \"tags\"

        [menu]
        main = [
        {identifier = \"archives\", name = \"Archives\", url = \"/archives/\", weight = 10},
        {identifier = \"categories\", name = \"Categories\", url = \"/categories/\", weight = 20},
        {identifier = \"search\", name = \"Search\", url = \"/search/\", weight = 30},
        {identifier = \"tags\", name = \"Tags\", url = \"/tags/\", weight = 40}
        ]"

        mkdir -p .github
        echo "$HUGO_CONFIG" > .github/hugo.toml

    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: ${{ inputs.hugo_version }}
        extended: true

    - name: Install PaperMod Theme
      shell: bash
      run: |
        if [ ! -d "themes/PaperMod" ]; then
          git submodule add -b master https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
        fi

    - name: Create Required Pages
      shell: bash
      run: |
        mkdir -p content
        cat > content/search.md << 'EOL'
        ---
        title: "Search"
        layout: "search"
        summary: "search"
        placeholder: "搜索文章..."
        ---
        EOL

        cat > content/archives.md << 'EOL'
        ---
        title: "Archives"
        layout: "archives"
        url: "/archives/"
        summary: "archives"
        ---
        EOL

    - name: Copy and Process Content
      shell: bash
      run: |
        find . -type f \
          ! -path "*/\.*" \
          ! -path "*/themes/*" \
          ! -path "*/content/*" \
          ! -path "*/public/*" \
          ! -name "README.md" \
          ! -name "hugo.toml" \
          -exec cp --parents {} content/ \;

        find content -type f -name "*.md" -exec sed -i 's|\./\(images\|img\|assets\)/|../\1/|g' {} +
        find content -type f -name "*.md" -exec sed -i 's|\./|../|g' {} +

    - name: Use Configured Hugo.toml
      shell: bash
      run: |
        if [ -f ".github/hugo.toml" ]; then
          cp .github/hugo.toml ./hugo.toml
        else
          echo "错误：找不到 hugo.toml 配置文件"
          exit 1
        fi

    - name: Build Site
      shell: bash
      run: hugo --gc --minify

    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ inputs.github_token }}
        publish_dir: ./public
        cname: ${{ inputs.custom_domain }}
